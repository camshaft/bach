on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2024-11-19

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.definitions.outputs.versions }}
      msrv: ${{ steps.definitions.outputs.msrv }}
    steps:
      - uses: actions/checkout@v4
      - name: Evaluate definitions
        id: definitions
        run: |
          rustup show active-toolchain
          export MSRV=$(rustup show active-toolchain | awk -F'-' '{print $1}')
          echo "msrv=$MSRV"
          if [ -z "$MSRV" ]; then
            echo "Error: MSRV did not parse correctly"
            exit 1
          fi
          echo "msrv=$MSRV" >> "$GITHUB_OUTPUT"
          export RAW_VERSIONS="stable $MSRV"
          export VERSIONS=$(echo $RAW_VERSIONS | jq -scR 'rtrimstr("\n")|split(" ")|.')
          echo "$VERSIONS"
          echo "versions=$VERSIONS" >> "$GITHUB_OUTPUT"

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install rust toolchain
        id: toolchain
        run: |
          rustup toolchain install ${{ env.RUST_NIGHTLY_TOOLCHAIN }} --profile minimal --component rustfmt
          rustup override set ${{ env.RUST_NIGHTLY_TOOLCHAIN }}

      - name: Run cargo fmt
        run: |
          cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install rust toolchain
        id: toolchain
        run: |
          rustup toolchain install stable --profile minimal --component clippy
          rustup override set stable

      - uses: camshaft/rust-cache@v1

      - name: Run cargo clippy
        run: |
          cargo clippy --all-features --all-targets --workspace

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        id: toolchain
        run: |
          rustup toolchain install ${{ env.RUST_NIGHTLY_TOOLCHAIN }} --profile minimal
          rustup override set ${{ env.RUST_NIGHTLY_TOOLCHAIN }}

      - uses: camshaft/rust-cache@v1

      - uses: camshaft/install@v1
        with:
          crate: cargo-udeps

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets
        env:
          RUSTC_WRAPPER: ""

  test:
    runs-on: ${{ matrix.os }}
    needs: env
    strategy:
      fail-fast: false
      matrix:
        rust: ${{ fromJson(needs.env.outputs.rust-versions) }}
        os: [ubuntu-latest, macOS-latest, windows-latest]
        features: ["default", ""]
        include:
          - rust: stable
            os: ubuntu-latest
            features: default,metrics
          - rust: stable
            os: ubuntu-latest
            features: default,leaks
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install toolchain
        id: toolchain
        run: |
          rustup toolchain install ${{ matrix.rust }}
          rustup override set ${{ matrix.rust }}

      - uses: camshaft/rust-cache@v1
        with:
          key: ${{ matrix.target }}

      - name: Run tests
        env:
          DEFAULT_FEATURES: ${{ contains(matrix.features, 'default') && '' || ' --no-default-features' }}
          FEATURES_LIST: ${{ matrix.features && format(' --features {0}', matrix.features) || '' }}
        run: |
          cargo test $DEFAULT_FEATURES $FEATURES_LIST

  miri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate: [bach]
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        id: toolchain
        run: |
          rustup toolchain install ${{ env.RUST_NIGHTLY_TOOLCHAIN }} --component miri,rust-src
          rustup override set ${{ env.RUST_NIGHTLY_TOOLCHAIN }}

      - uses: camshaft/rust-cache@v1
        with:
          key: ${{ matrix.crate }}

      - name: ${{ matrix.crate }}
        # Disabling capture speeds up miri execution: https://github.com/rust-lang/miri/issues/1780#issuecomment-830664528
        run: cd ${{ matrix.crate }} && cargo miri test -- --nocapture
        env:
          # needed to read corpus files from filesystem
          MIRIFLAGS: -Zmiri-disable-isolation

  wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        id: toolchain
        run: |
          rustup toolchain install stable
          rustup override set stable

      - uses: camshaft/install@v1
        with:
          crate: wasm-pack

      - uses: camshaft/rust-cache@v1

      - name: Run node tests
        working-directory: bach-wasm-tests
        run: |
          wasm-pack test --node

      - name: Run firefox tests
        working-directory: bach-wasm-tests
        run: |
          wasm-pack test --firefox --headless

      - name: Run chrome tests
        working-directory: bach-wasm-tests
        run: |
          wasm-pack test --chrome --headless

  kani:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate: [bach]
    steps:
      - uses: actions/checkout@v4

      - name: Kani run
        uses: model-checking/kani-github-action@v1.1
        with:
          working-directory: ${{ matrix.crate }}

  # run integration tests with our main consumers
  integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ["aws/s2n-quic"]

    steps:
      - uses: actions/checkout@v4.2.2

      - uses: actions/checkout@v4.2.2
        with:
          repository: ${{ matrix.repo }}
          path: "target/integration/${{ matrix.repo }}"

      - name: Install toolchain
        id: toolchain
        run: |
          rustup toolchain install stable

      - name: Add patch
        working-directory: target/integration/${{ matrix.repo }}
        run: |
          cat <<EOF >> Cargo.toml
          [patch.crates-io]
          bach = { path = "../../../../bach" }
          EOF

      - uses: camshaft/rust-cache@v1
        with:
          key: ${{ matrix.repo }}

      - name: Tests
        working-directory: target/integration/${{ matrix.repo }}
        run: |
          rustup override set stable
          cargo test --workspace
